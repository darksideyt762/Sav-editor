(function (factory) {  "use strict";  if (typeof define === "function" && define.amd) {    define(["jquery"], factory);  } else if (typeof exports === "object") {    factory(require("jquery"));  } else {    factory(window.jQuery);  }}(function ($) {  $.ui = $.ui || {};  $.ui.version = "1.12.1";  if (!$.expr.pseudos) {    $.expr.pseudos = $.expr[":"];  }  if (!$.uniqueSort) {    $.uniqueSort = $.unique;  }  const _cleanData = $.cleanData;  $.cleanData = function (elems) {    let elem, events;    for (let i = 0; (elem = elems[i]) != null; i++) {      events = $._data(elem, "events");      if (events && events.remove) {        $(elem).triggerHandler("remove");      }    }    _cleanData(elems);  };  $.widget = function (name, base, prototype) {    let namespace = name.split(".")[0];    name = name.split(".")[1];    const fullName = namespace + "-" + name;    if (!prototype) {      prototype = base;      base = $.Widget;    }    if ($.isArray(prototype)) {      prototype = $.extend.apply(null, [{}].concat(prototype));    }    $.expr.pseudos[fullName.toLowerCase()] = function (elem) {      return !!$.data(elem, fullName);    };    $.[namespace] = $.[namespace] || {};    const existingConstructor = $.[namespace][name];    const constructor = $.[namespace][name] = function (options, element) {      if (!this._createWidget) {        return new constructor(options, element);      }      if (arguments.length) {        this._createWidget(options, element);      }    };    $.extend(constructor, existingConstructor, {      version: prototype.version,      _proto: $.extend({}, prototype),      _childConstructors: []    });    const basePrototype = new base();    basePrototype.options = $.widget.extend({}, basePrototype.options);    $.each(prototype, function (prop, value) {      if ($.isFunction(value)) {        prototype[prop] = function () {          const _super = function () {            return base.prototype[prop].apply(this, arguments);          };          const _superApply = function (args) {            return base.prototype[prop].apply(this, args);          };          return function () {            const tmp = this._super;            const tmpApply = this._superApply;            this._super = _super;            this._superApply = _superApply;            const result = value.apply(this, arguments);            this._super = tmp;            this._superApply = tmpApply;            return result;          };        }();      } else {        prototype[prop] = value;      }    });    constructor.prototype = $.widget.extend(basePrototype, {      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name    }, prototype, {      constructor: constructor,      namespace: namespace,      widgetName: name,      widgetFullName: fullName    });    if (existingConstructor) {      $.each(existingConstructor._childConstructors, function (i, child) {        const childPrototype = child.prototype;        $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);      });      delete existingConstructor._childConstructors;    } else {      base._childConstructors.push(constructor);    }    $.widget.bridge(name, constructor);    return constructor;  };  $.widget.extend = function (target) {    let input, key;    const args = Array.prototype.slice.call(arguments, 1);    for (let i = 0; i < args.length; i++) {      input = args[i];      for (key in input) {        if (Object.prototype.hasOwnProperty.call(input, key)) {          const value = input[key];          if ($.isPlainObject(value)) {            target[key] = $.isPlainObject(target[key]) ?              $.widget.extend({}, target[key], value) :              $.widget.extend({}, value);          } else {            target[key] = value;          }        }      }    }    return target;  };  $.widget.bridge = function (name, object) {    const fullName = object.prototype.widgetFullName || name;    $.fn[name] = function (options) {      const isMethodCall = typeof options === "string";      const args = Array.prototype.slice.call(arguments, 1);      let returnValue = this;      if (isMethodCall) {        this.each(function () {          const instance = $.data(this, fullName);          if (!instance) {            $.error("cannot call methods on " + name + " prior to initialization; " +              "attempted to call method '" + options + "'");            return;          }          if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {            $.error("no such method '" + options + "' for " + name + " widget instance");            return;          }          const methodValue = instance[options].apply(instance, args);          if (methodValue !== instance && methodValue !== undefined) {            returnValue = methodValue && methodValue.jquery ?              returnValue.pushStack(methodValue.get()) :              methodValue;            return false;          }        });      } else {        if (args.length) {          options = $.widget.extend.apply(null, [options].concat(args));        }        this.each(function () {          let instance = $.data(this, fullName);          if (instance) {            instance.option(options || {});            if (instance._init) {              instance._init();            }          } else {            $.data(this, fullName, new object(options, this));          }        });      }      return returnValue;    };  };  $.Widget = function () {};  $.Widget._childConstructors = [];  $.Widget.prototype = {    widgetName: "widget",    widgetEventPrefix: "",    defaultElement: "<div>",    options: {      classes: {},      disabled: false,      create: null    },    _createWidget: function (options, element) {      element = $(element || this.defaultElement || this)[0];      this.element = $(element);      this.uuid = ++$.uuid;      this.eventNamespace = "." + this.widgetName + this.uuid;      this.bindings = $();      this.hoverable = $();      this.focusable = $();      this.classesElementLookup = {};      if (element !== this) {        $.data(element, this.widgetFullName, this);        this._on(true, this.element, {          remove: function (event) {            if (event.target === element) {              this.destroy();            }          }        });        this.document = $(element.style ? element.ownerDocument : element.document || element);        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);      }      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);      this._create();      if (this.options.disabled) {        this._setOptionDisabled(this.options.disabled);      }      this._trigger("create", null, this._getCreateEventData());      this._init();    },    _getCreateOptions: function () {      return {};    },    _getCreateEventData: $.noop,    _create: $.noop,    _init: $.noop,    destroy: function () {      const that = this;      this._destroy();      $.each(this.classesElementLookup, function (key, value) {        that._removeClass(value, key);      });      this.element        .off(this.eventNamespace)        .removeData(this.widgetFullName);      this.widget()        .off(this.eventNamespace)        .removeAttr("aria-disabled");      this.bindings.off(this.eventNamespace);    },    _destroy: $.noop,    widget: function () {      return this.element;    },    option: function (key, value) {      const options = key;      let parts, curOption, i;      if (arguments.length === 0) {        return $.widget.extend({}, this.options);      }      if (typeof key === "string") {        parts = key.split(".");        key = parts.shift();        if (parts.length) {          curOption = $.widget.extend({}, this.options[key]);          for (i = 0; i < parts.length - 1; i++) {            curOption = curOption[parts[i]] || {};          }          if (value === undefined) {            return curOption[parts.pop()] === undefined ? null : curOption[parts.pop()];          }          curOption[parts.pop()] = value;          options = {};          options[key] = curOption;        } else {          if (value === undefined) {            return this.options[key] === undefined ? null : this.options[key];          }          options = {};          options[key] = value;        }      }      this._setOptions(options);      return this;    },    _setOptions: function (options) {      for (const key in options) {        this._setOption(key, options[key]);      }      return this;    },    _setOption: function (key, value) {      if (key === "classes") {        this._setOptionClasses(value);      }      this.options[key] = value;      if (key === "disabled") {        this._setOptionDisabled(value);      }      return this;    },    _setOptionClasses: function (classes) {      const that = this;      $.each(this.classesElementLookup, function (key, elems) {        that._removeClass(elems, key);      });      this.classesElementLookup = {};      this._addClass(this.element, null, classes);    },    _setOptionDisabled: function (value) {      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);      if (value) {        this._removeClass(this.hoverable, null, "ui-state-hover");        this._removeClass(this.focusable, null, "ui-state-focus");      }    },    enable: function () {      return this._setOptions({ disabled: false });    },    disable: function () {      return this._setOptions({ disabled: true });    },    _trigger: function (type, event, data) {      let prop, orig, callback = this.options[type];      data = data || {};      event = $.Event(event);      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();      event.target = this.element[0];      orig = event.originalEvent;      if (orig) {        for (prop in orig) {          if (!(prop in event)) {            event[prop] = orig[prop];          }        }      }      this.element.trigger(event, data);      return !(typeof callback === "function" && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());    }  };  $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) {    $.Widget.prototype["_" + method] = function (element, options, callback) {      if (typeof options === "string") {        options = { effect: options };      }      let hasOptions = !$.isEmptyObject(options);      options = options || {};      if (typeof options === "number") {        options = { duration: options };      }      const effectName = options.effect || defaultEffect;      if (options.delay) {        element.delay(options.delay);      }      if (hasOptions && $.effects && $.effects.effect[effectName]) {        element[method](options);      } else if (effectName !== method && element[effectName]) {        element[effectName](options.duration, options.easing, callback);      } else {        element.queue(function (next) {          $(this)[method]();          if (callback) {            callback.call(element[0]);          }          next();        });      }    };  });}));